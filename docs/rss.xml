<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Love life Love code</title><link>https://hacker4257.github.io/</link><description>Love life Love code</description><copyright>Love life Love code</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://hacker4257.github.io/ava.jpeg</url><title>avatar</title><link>https://hacker4257.github.io/</link></image><lastBuildDate>Fri, 27 Dec 2024 09:22:35 +0000</lastBuildDate><managingEditor>Love life Love code</managingEditor><ttl>60</ttl><webMaster>Love life Love code</webMaster><item><title>深入浅出：生成树协议(STP)完全指南</title><link>https://hacker4257.github.io//post/shen-ru-qian-chu-%EF%BC%9A-sheng-cheng-shu-xie-yi-%28STP%29-wan-quan-zhi-nan.html</link><description># 深入浅出：生成树协议(STP)完全指南&#13;
&#13;
## 引言&#13;
还记得第一次配置交换机时被网络环路折磨的日子吗？数据包在网络中无休止地转发，网络瘫痪，一切陷入混乱。</description><guid isPermaLink="true">https://hacker4257.github.io//post/shen-ru-qian-chu-%EF%BC%9A-sheng-cheng-shu-xie-yi-%28STP%29-wan-quan-zhi-nan.html</guid><pubDate>Fri, 27 Dec 2024 09:22:11 +0000</pubDate></item><item><title>深入理解 VLAN 和 Trunk 技术</title><link>https://hacker4257.github.io//post/shen-ru-li-jie-%20VLAN%20-he-%20Trunk%20-ji-shu.html</link><description>&#13;
在现代网络中，**VLAN（虚拟局域网）**和**Trunk**技术是网络管理员的重要工具，它们通过灵活的网络分组和高效的数据传输方式，显著提升了网络的安全性、可管理性和资源利用率。</description><guid isPermaLink="true">https://hacker4257.github.io//post/shen-ru-li-jie-%20VLAN%20-he-%20Trunk%20-ji-shu.html</guid><pubDate>Wed, 25 Dec 2024 02:49:42 +0000</pubDate></item><item><title>探秘 Pulsar：下一代分布式消息系统</title><link>https://hacker4257.github.io//post/tan-mi-%20Pulsar%EF%BC%9A-xia-yi-dai-fen-bu-shi-xiao-xi-xi-tong.html</link><description>&#13;
在现代互联网架构中，分布式消息系统扮演着至关重要的角色。</description><guid isPermaLink="true">https://hacker4257.github.io//post/tan-mi-%20Pulsar%EF%BC%9A-xia-yi-dai-fen-bu-shi-xiao-xi-xi-tong.html</guid><pubDate>Mon, 23 Dec 2024 04:52:03 +0000</pubDate></item><item><title> Kubernetes (k8s) 完全指南</title><link>https://hacker4257.github.io//post/%20Kubernetes%20%28k8s%29%20-wan-quan-zhi-nan.html</link><description>## 1. Kubernetes 简介&#13;
&#13;
Kubernetes（常简称为 k8s）是一个开源的容器编排平台，由 Google 基于其内部使用的 Borg 系统开发。</description><guid isPermaLink="true">https://hacker4257.github.io//post/%20Kubernetes%20%28k8s%29%20-wan-quan-zhi-nan.html</guid><pubDate>Fri, 20 Dec 2024 08:11:01 +0000</pubDate></item><item><title>网络模型的层次结构：七层与四层之争</title><link>https://hacker4257.github.io//post/wang-luo-mo-xing-de-ceng-ci-jie-gou-%EF%BC%9A-qi-ceng-yu-si-ceng-zhi-zheng.html</link><description>&#13;
在计算机网络的领域中，**OSI（开放系统互联）模型**和**TCP/IP模型**是两种广泛使用的网络分层参考框架。</description><guid isPermaLink="true">https://hacker4257.github.io//post/wang-luo-mo-xing-de-ceng-ci-jie-gou-%EF%BC%9A-qi-ceng-yu-si-ceng-zhi-zheng.html</guid><pubDate>Wed, 18 Dec 2024 03:04:43 +0000</pubDate></item><item><title>Docker：让应用部署像搭积木一样简单</title><link>https://hacker4257.github.io//post/Docker%EF%BC%9A-rang-ying-yong-bu-shu-xiang-da-ji-mu-yi-yang-jian-dan.html</link><description>&#13;
## 什么是Docker？🐳&#13;
&#13;
想象一下，你有一个精心制作的应用程序，但每次在不同的电脑或服务器上运行时，总会遇到'我的电脑上可以运行'的尴尬情况。</description><guid isPermaLink="true">https://hacker4257.github.io//post/Docker%EF%BC%9A-rang-ying-yong-bu-shu-xiang-da-ji-mu-yi-yang-jian-dan.html</guid><pubDate>Mon, 16 Dec 2024 08:52:58 +0000</pubDate></item><item><title>Git: 分布式版本控制系统简介</title><link>https://hacker4257.github.io//post/Git-%20-fen-bu-shi-ban-ben-kong-zhi-xi-tong-jian-jie.html</link><description>&#13;
&#13;
Git是一种强大的分布式版本控制系统，由Linus Torvalds于2005年开发。</description><guid isPermaLink="true">https://hacker4257.github.io//post/Git-%20-fen-bu-shi-ban-ben-kong-zhi-xi-tong-jian-jie.html</guid><pubDate>Thu, 12 Dec 2024 03:16:23 +0000</pubDate></item><item><title>Django 入门指南：从零开始打造你的第一个Web应用</title><link>https://hacker4257.github.io//post/Django%20-ru-men-zhi-nan-%EF%BC%9A-cong-ling-kai-shi-da-zao-ni-de-di-yi-ge-Web-ying-yong.html</link><description>&#13;
如果你对Web开发感兴趣，Django 是一扇通往高效开发的大门。</description><guid isPermaLink="true">https://hacker4257.github.io//post/Django%20-ru-men-zhi-nan-%EF%BC%9A-cong-ling-kai-shi-da-zao-ni-de-di-yi-ge-Web-ying-yong.html</guid><pubDate>Mon, 09 Dec 2024 03:26:50 +0000</pubDate></item><item><title>FastAPI：现代Python Web框架的璀璨明珠</title><link>https://hacker4257.github.io//post/FastAPI%EF%BC%9A-xian-dai-Python%20Web-kuang-jia-de-cui-can-ming-zhu.html</link><description>&#13;
## 引言&#13;
&#13;
在当今快速发展的Web应用开发领域，开发者不仅追求性能，还需要框架能够提供简洁、高效的开发体验。</description><guid isPermaLink="true">https://hacker4257.github.io//post/FastAPI%EF%BC%9A-xian-dai-Python%20Web-kuang-jia-de-cui-can-ming-zhu.html</guid><pubDate>Fri, 06 Dec 2024 09:30:51 +0000</pubDate></item><item><title>API 开发新选择：探索 APIFlask 的高效魅力</title><link>https://hacker4257.github.io//post/API%20-kai-fa-xin-xuan-ze-%EF%BC%9A-tan-suo-%20APIFlask%20-de-gao-xiao-mei-li.html</link><description>&#13;
### 介绍：什么是 APIFlask？&#13;
&#13;
**APIFlask** 是基于 Python 的轻量级 Web 框架，用于快速构建 RESTful APIs。</description><guid isPermaLink="true">https://hacker4257.github.io//post/API%20-kai-fa-xin-xuan-ze-%EF%BC%9A-tan-suo-%20APIFlask%20-de-gao-xiao-mei-li.html</guid><pubDate>Wed, 04 Dec 2024 07:43:25 +0000</pubDate></item><item><title>Flask 入门指南：快速构建你的第一个 Web 应用</title><link>https://hacker4257.github.io//post/Flask%20-ru-men-zhi-nan-%EF%BC%9A-kuai-su-gou-jian-ni-de-di-yi-ge-%20Web%20-ying-yong.html</link><description>&#13;
如果你正在寻找一种简单而高效的方法来创建 Web 应用或 API，那么 Flask 是一个很好的选择。</description><guid isPermaLink="true">https://hacker4257.github.io//post/Flask%20-ru-men-zhi-nan-%EF%BC%9A-kuai-su-gou-jian-ni-de-di-yi-ge-%20Web%20-ying-yong.html</guid><pubDate>Mon, 02 Dec 2024 04:17:17 +0000</pubDate></item><item><title>Python 装饰器：让代码更优雅</title><link>https://hacker4257.github.io//post/Python%20-zhuang-shi-qi-%EF%BC%9A-rang-dai-ma-geng-you-ya.html</link><description># Python 装饰器：让代码更优雅&#13;
&#13;
在 Python 中，装饰器是一个非常强大且常用的功能。</description><guid isPermaLink="true">https://hacker4257.github.io//post/Python%20-zhuang-shi-qi-%EF%BC%9A-rang-dai-ma-geng-you-ya.html</guid><pubDate>Fri, 29 Nov 2024 02:53:44 +0000</pubDate></item><item><title>《剪发不只是艺术：会员系统全栈开发指南》</title><link>https://hacker4257.github.io//post/%E3%80%8A-jian-fa-bu-zhi-shi-yi-shu-%EF%BC%9A-hui-yuan-xi-tong-quan-zhan-kai-fa-zhi-nan-%E3%80%8B.html</link><description>&#13;
&#13;
### 故事背景&#13;
&#13;
最近总觉得有点偷懒，工作和学习都没有太大的进展。</description><guid isPermaLink="true">https://hacker4257.github.io//post/%E3%80%8A-jian-fa-bu-zhi-shi-yi-shu-%EF%BC%9A-hui-yuan-xi-tong-quan-zhan-kai-fa-zhi-nan-%E3%80%8B.html</guid><pubDate>Wed, 27 Nov 2024 02:42:35 +0000</pubDate></item><item><title>位图BitMap：一种非常高效的存储和查询数据结构</title><link>https://hacker4257.github.io//post/wei-tu-BitMap%EF%BC%9A-yi-zhong-fei-chang-gao-xiao-de-cun-chu-he-cha-xun-shu-ju-jie-gou.html</link><description>### 位图法（Bitmap Method）概述&#13;
&#13;
位图法是一种空间效率极高的数据结构，用于存储和处理大量的布尔值或整数集合。</description><guid isPermaLink="true">https://hacker4257.github.io//post/wei-tu-BitMap%EF%BC%9A-yi-zhong-fei-chang-gao-xiao-de-cun-chu-he-cha-xun-shu-ju-jie-gou.html</guid><pubDate>Tue, 19 Nov 2024 03:32:36 +0000</pubDate></item><item><title>SQLAlchemy：高效与灵活的Python数据库ORM解决方案</title><link>https://hacker4257.github.io//post/SQLAlchemy%EF%BC%9A-gao-xiao-yu-ling-huo-de-Python-shu-ju-ku-ORM-jie-jue-fang-an.html</link><description>SQLAlchemy 是 Python 中一个非常强大且灵活的数据库框架，它为 Python 提供了一个全功能的数据库工具包。</description><guid isPermaLink="true">https://hacker4257.github.io//post/SQLAlchemy%EF%BC%9A-gao-xiao-yu-ling-huo-de-Python-shu-ju-ku-ORM-jie-jue-fang-an.html</guid><pubDate>Mon, 18 Nov 2024 03:20:50 +0000</pubDate></item><item><title>Python类型提示(typing)完全指南：从入门到进阶</title><link>https://hacker4257.github.io//post/Python-lei-xing-ti-shi-%28typing%29-wan-quan-zhi-nan-%EF%BC%9A-cong-ru-men-dao-jin-jie.html</link><description>## 引言&#13;
&#13;
Python 作为一门动态类型语言，在灵活性方面有着显著优势。</description><guid isPermaLink="true">https://hacker4257.github.io//post/Python-lei-xing-ti-shi-%28typing%29-wan-quan-zhi-nan-%EF%BC%9A-cong-ru-men-dao-jin-jie.html</guid><pubDate>Thu, 14 Nov 2024 06:06:25 +0000</pubDate></item><item><title>Pydantic 完全指南：Python数据验证利器</title><link>https://hacker4257.github.io//post/Pydantic%20-wan-quan-zhi-nan-%EF%BC%9APython-shu-ju-yan-zheng-li-qi.html</link><description>&#13;
&#13;
## 引言&#13;
&#13;
在现代Python开发中，数据验证和序列化是一个常见的需求。</description><guid isPermaLink="true">https://hacker4257.github.io//post/Pydantic%20-wan-quan-zhi-nan-%EF%BC%9APython-shu-ju-yan-zheng-li-qi.html</guid><pubDate>Wed, 13 Nov 2024 02:46:27 +0000</pubDate></item><item><title>dataclass：简化数据存储和管理</title><link>https://hacker4257.github.io//post/dataclass%EF%BC%9A-jian-hua-shu-ju-cun-chu-he-guan-li.html</link><description>&#13;
&#13;
在Python中，随着代码规模的增大，管理大量数据变得越来越复杂。</description><guid isPermaLink="true">https://hacker4257.github.io//post/dataclass%EF%BC%9A-jian-hua-shu-ju-cun-chu-he-guan-li.html</guid><pubDate>Fri, 08 Nov 2024 08:39:49 +0000</pubDate></item><item><title>Conda完全指南</title><link>https://hacker4257.github.io//post/Conda-wan-quan-zhi-nan.html</link><description>&#13;
## 什么是Conda?&#13;
&#13;
Conda是一个开源的包管理系统和环境管理系统,运行在Windows、macOS和Linux上。</description><guid isPermaLink="true">https://hacker4257.github.io//post/Conda-wan-quan-zhi-nan.html</guid><pubDate>Thu, 07 Nov 2024 02:46:37 +0000</pubDate></item><item><title>跳表(Skip List)</title><link>https://hacker4257.github.io//post/tiao-biao-%28Skip%20List%29.html</link><description>&#13;
&#13;
## 1. 跳表的由来&#13;
&#13;
跳表是由William Pugh在1989年提出的一种数据结构，旨在提供一种能够替代平衡树的数据结构。</description><guid isPermaLink="true">https://hacker4257.github.io//post/tiao-biao-%28Skip%20List%29.html</guid><pubDate>Mon, 04 Nov 2024 06:00:43 +0000</pubDate></item><item><title>深度优先搜索(DFS)算法详解</title><link>https://hacker4257.github.io//post/shen-du-you-xian-sou-suo-%28DFS%29-suan-fa-xiang-jie.html</link><description>&#13;
深度优先搜索（Depth-First Search，简称 DFS）是一种用于遍历或搜索树/图的算法。</description><guid isPermaLink="true">https://hacker4257.github.io//post/shen-du-you-xian-sou-suo-%28DFS%29-suan-fa-xiang-jie.html</guid><pubDate>Thu, 31 Oct 2024 03:25:45 +0000</pubDate></item><item><title>抽象思维训练营：从具体到抽象的趣味之旅</title><link>https://hacker4257.github.io//post/chou-xiang-si-wei-xun-lian-ying-%EF%BC%9A-cong-ju-ti-dao-chou-xiang-de-qu-wei-zhi-lv.html</link><description>&#13;
## 第一站：生活中的抽象训练&#13;
&#13;
### 🎮 超市购物游戏&#13;
想象你在超市购物，看着琳琅满目的商品，试试这个有趣的训练：&#13;
&#13;
1. **分类大师挑战**&#13;
   - 基础版：把购物车里的东西分类&#13;
     * '这是吃的，那是用的'太简单啦！&#13;
     * 试试按'保质期'分类&#13;
     * 或者按'使用场景'分类&#13;
   &#13;
   - 进阶版：想出至少5种不同的分类方法&#13;
     * 按产地分类？&#13;
     * 按使用时间分类？&#13;
     * 按环保程度分类？&#13;
   &#13;
   - 高手版：找出商品之间隐藏的联系&#13;
     * '咦，这个洗发水和这个饼干包装风格好像啊'&#13;
     * '原来这些品牌都是同一个公司的！'&#13;
&#13;
### 🎨 涂鸦练习：简化大师&#13;
拿出笔和纸，试试这个：&#13;
&#13;
1. **画一只猫的五个版本**&#13;
   - 第一版：画得很详细，毛发纹理都要&#13;
   - 第二版：简化一点，保留主要特征&#13;
   - 第三版：再简化，只留下关键线条&#13;
   - 第四版：极简版，用最少的线条&#13;
   - 第五版：抽象到别人还能认出是猫的极限&#13;
&#13;
&gt; 小贴士：你会发现，最简单的版本往往最能抓住'猫的本质'&#13;
&#13;
## 第二站：编程思维训练&#13;
&#13;
### 🎮 游戏开发模拟器&#13;
&#13;
想象你要设计一个简单的'弹球游戏'：&#13;
&#13;
1. **第一关：具体到抽象**&#13;
   ```python&#13;
   # 不要这样写&#13;
   球 = {&#13;
       位置_x: 100,&#13;
       位置_y: 200,&#13;
       速度_x: 5,&#13;
       速度_y: 3,&#13;
       颜色: '红色',&#13;
       大小: 10&#13;
   }&#13;
   &#13;
   # 试试这样抽象&#13;
   class 游戏物体:&#13;
       def __init__(self, 位置, 速度, 外观):&#13;
           self.位置 = 位置&#13;
           self.速度 = 速度&#13;
           self.外观 = 外观&#13;
   &#13;
   # 现在弹球只是游戏物体的一种！&#13;
   弹球 = 游戏物体(位置=(100,200), 速度=(5,3), 外观={'颜色':'红色', '大小':10})&#13;
   ```&#13;
&#13;
2. **第二关：功能抽象**&#13;
   ```python&#13;
   # 不要写重复的代码&#13;
   def 移动弹球():&#13;
       # 移动代码&#13;
   &#13;
   def 移动挡板():&#13;
       # 类似的移动代码&#13;
   &#13;
   # 而是抽象出共同的行为&#13;
   def 移动(物体):&#13;
       物体.位置.x += 物体.速度.x&#13;
       物体.位置.y += 物体.速度.y&#13;
   ```&#13;
&#13;
### 🎯 生活中的'函数'&#13;
&#13;
试着把日常活动想象成函数：&#13;
&#13;
1. **做饭函数**&#13;
   ```python&#13;
   def 做一顿饭(食材清单, 厨具清单):&#13;
       准备食材()&#13;
       准备厨具()&#13;
       按步骤烹饪()&#13;
       return 美味的饭菜&#13;
   ```&#13;
&#13;
2. **收拾房间函数**&#13;
   ```python&#13;
   def 打扫房间(房间状态='乱糟糟'):&#13;
       if 房间状态 == '乱糟糟':&#13;
           整理物品()&#13;
           吸尘()&#13;
           拖地()&#13;
       return '干净的房间'&#13;
   ```&#13;
&#13;
## 第三站：思维跳跃训练&#13;
&#13;
### 🎪 '这个让我想起了...'游戏&#13;
&#13;
1. **看到月亮，你能想到什么？**&#13;
   - 圆形 → 披萨&#13;
   - 会变化 → 心情&#13;
   - 永恒 → 真理&#13;
   - 遥远 → 理想&#13;
&#13;
2. **看到一个手机App，你能想到什么？**&#13;
   - 界面 → 房子的门面&#13;
   - 功能 → 瑞士军刀&#13;
   - 系统 → 城市交通&#13;
&#13;
### 🎭 角色转换训练&#13;
&#13;
想象你是：&#13;
&#13;
1. **一个操作系统**&#13;
   - 如何管理程序们？&#13;
   - 如何分配资源？&#13;
   - 如何处理紧急情况？&#13;
&#13;
2. **一个数据库**&#13;
   - 如何组织数据？&#13;
   - 如何快速检索？&#13;
   - 如何保证安全？&#13;
&#13;
## 第四站：实战演练&#13;
&#13;
### 🎯 项目：设计一个图书管理系统&#13;
&#13;
1. **第一步：具体到抽象**&#13;
   - 实体：书籍、读者、管理员&#13;
   - 行为：借阅、归还、查询&#13;
   - 规则：借阅期限、超期处理&#13;
&#13;
2. **第二步：寻找共性**&#13;
   - 所有实体都有ID&#13;
   - 所有操作都需要记录&#13;
   - 所有规则都有例外&#13;
&#13;
### 🎮 挑战：简化复杂系统&#13;
&#13;
拿一个复杂的系统（比如医院挂号系统），试着：&#13;
&#13;
1. **画出系统地图**&#13;
   - 找出主要组成部分&#13;
   - 画出它们之间的关系&#13;
   - 标注重要的交互点&#13;
&#13;
2. **设计理想流程**&#13;
   - 假设没有任何限制&#13;
   - 设计最简单的使用流程&#13;
   - 逐步添加必要的复杂性&#13;
&#13;
## 实战小贴士&#13;
&#13;
1. **从简单开始**&#13;
   - 先把大象装进冰箱的第一步做好&#13;
   - 再考虑第二步和第三步&#13;
&#13;
2. **多问'为什么'**&#13;
   - 这个功能是必须的吗？&#13;
   - 可以更简单吗？&#13;
   - 是否有更好的方式？&#13;
&#13;
3. **寻找模式**&#13;
   - 这个问题之前见过吗？&#13;
   - 能用已知方法解决吗？&#13;
   - 如何改进现有方案？&#13;
&#13;
记住：抽象思维就像练武功，重要的是每天练习。</description><guid isPermaLink="true">https://hacker4257.github.io//post/chou-xiang-si-wei-xun-lian-ying-%EF%BC%9A-cong-ju-ti-dao-chou-xiang-de-qu-wei-zhi-lv.html</guid><pubDate>Tue, 29 Oct 2024 02:33:46 +0000</pubDate></item><item><title>理解抽象：从艺术到计算机的思维之旅</title><link>https://hacker4257.github.io//post/li-jie-chou-xiang-%EF%BC%9A-cong-yi-shu-dao-ji-suan-ji-de-si-wei-zhi-lv.html</link><description>## 前言&#13;
想象一下，当你在街上看到一个交通信号灯，你看到的不仅仅是一个发光的设备，而是一个表示'停止'或'通行'的符号。</description><guid isPermaLink="true">https://hacker4257.github.io//post/li-jie-chou-xiang-%EF%BC%9A-cong-yi-shu-dao-ji-suan-ji-de-si-wei-zhi-lv.html</guid><pubDate>Mon, 28 Oct 2024 06:00:35 +0000</pubDate></item><item><title>字典树(Trie)从入门到进阶</title><link>https://hacker4257.github.io//post/zi-dian-shu-%28Trie%29-cong-ru-men-dao-jin-jie.html</link><description>&#13;
&#13;
## 1. 什么是字典树？&#13;
&#13;
字典树，也称为前缀树(Prefix Tree)或Trie树，是一种树形数据结构，特别适用于处理字符串集合。</description><guid isPermaLink="true">https://hacker4257.github.io//post/zi-dian-shu-%28Trie%29-cong-ru-men-dao-jin-jie.html</guid><pubDate>Fri, 25 Oct 2024 05:28:21 +0000</pubDate></item><item><title>探讨哈希表（Hash Table）</title><link>https://hacker4257.github.io//post/tan-tao-ha-xi-biao-%EF%BC%88Hash%20Table%EF%BC%89.html</link><description>&#13;
&#13;
## 1. 哈希表简介&#13;
&#13;
哈希表（也称散列表）是一种基于键值对存储数据的数据结构，它通过哈希函数将键映射到数组的某个位置来存储和查找数据，实现了近似 O(1) 的查找效率。</description><guid isPermaLink="true">https://hacker4257.github.io//post/tan-tao-ha-xi-biao-%EF%BC%88Hash%20Table%EF%BC%89.html</guid><pubDate>Wed, 23 Oct 2024 09:04:35 +0000</pubDate></item><item><title>非线性数据结构：理论与Go语言实现</title><link>https://hacker4257.github.io//post/fei-xian-xing-shu-ju-jie-gou-%EF%BC%9A-li-lun-yu-Go-yu-yan-shi-xian.html</link><description>&#13;
## 引言&#13;
&#13;
非线性数据结构是计算机科学中的核心概念，它们提供了组织和处理复杂数据关系的有效方法。</description><guid isPermaLink="true">https://hacker4257.github.io//post/fei-xian-xing-shu-ju-jie-gou-%EF%BC%9A-li-lun-yu-Go-yu-yan-shi-xian.html</guid><pubDate>Tue, 22 Oct 2024 05:20:58 +0000</pubDate></item><item><title>线性数据结构详解及Go语言实现</title><link>https://hacker4257.github.io//post/xian-xing-shu-ju-jie-gou-xiang-jie-ji-Go-yu-yan-shi-xian.html</link><description>&#13;
&#13;
线性数据结构是计算机科学中的基础知识，是学习数据结构和算法的起点。</description><guid isPermaLink="true">https://hacker4257.github.io//post/xian-xing-shu-ju-jie-gou-xiang-jie-ji-Go-yu-yan-shi-xian.html</guid><pubDate>Mon, 21 Oct 2024 06:16:42 +0000</pubDate></item><item><title>算法的时间复杂度和空间复杂度：通俗易懂的解释</title><link>https://hacker4257.github.io//post/suan-fa-de-shi-jian-fu-za-du-he-kong-jian-fu-za-du-%EF%BC%9A-tong-su-yi-dong-de-jie-shi.html</link><description>&#13;
&#13;
想象你在做一道菜。</description><guid isPermaLink="true">https://hacker4257.github.io//post/suan-fa-de-shi-jian-fu-za-du-he-kong-jian-fu-za-du-%EF%BC%9A-tong-su-yi-dong-de-jie-shi.html</guid><pubDate>Fri, 18 Oct 2024 02:43:11 +0000</pubDate></item><item><title>算法的基本概念</title><link>https://hacker4257.github.io//post/suan-fa-de-ji-ben-gai-nian.html</link><description>&#13;
在这个数字化的时代,算法无处不在。</description><guid isPermaLink="true">https://hacker4257.github.io//post/suan-fa-de-ji-ben-gai-nian.html</guid><pubDate>Thu, 17 Oct 2024 08:05:39 +0000</pubDate></item><item><title>什么是 AI 智能体（AI Agent）</title><link>https://hacker4257.github.io//post/shen-me-shi-%20AI%20-zhi-neng-ti-%EF%BC%88AI%20Agent%EF%BC%89.html</link><description>AI 智能体（AI Agent）是一种能够自主执行任务、做出决策并与环境互动的计算系统。</description><guid isPermaLink="true">https://hacker4257.github.io//post/shen-me-shi-%20AI%20-zhi-neng-ti-%EF%BC%88AI%20Agent%EF%BC%89.html</guid><pubDate>Tue, 15 Oct 2024 09:24:33 +0000</pubDate></item><item><title> 小白也能懂的Embedding(嵌入)解释</title><link>https://hacker4257.github.io//post/%20-xiao-bai-ye-neng-dong-de-Embedding%28-qian-ru-%29-jie-shi.html</link><description>&#13;
你有没有想过,计算机是如何理解单词、句子,甚至是图片的?今天,我们就来聊聊一个叫做'embedding'(嵌入)的神奇技术,它就像是计算机的'翻译官',帮助机器理解我们的世界。</description><guid isPermaLink="true">https://hacker4257.github.io//post/%20-xiao-bai-ye-neng-dong-de-Embedding%28-qian-ru-%29-jie-shi.html</guid><pubDate>Sat, 12 Oct 2024 03:24:17 +0000</pubDate></item><item><title>人工智能与神经网络入门</title><link>https://hacker4257.github.io//post/ren-gong-zhi-neng-yu-shen-jing-wang-luo-ru-men.html</link><description># 从RNN到Transformer的进化之路&#13;
&#13;
## 引言&#13;
想象一下，你正在学习一门新的语言。</description><guid isPermaLink="true">https://hacker4257.github.io//post/ren-gong-zhi-neng-yu-shen-jing-wang-luo-ru-men.html</guid><pubDate>Fri, 11 Oct 2024 05:47:30 +0000</pubDate></item><item><title>开源大模型 Llama 实战</title><link>https://hacker4257.github.io//post/kai-yuan-da-mo-xing-%20Llama%20-shi-zhan.html</link><description>近年来，开源大模型的飞速发展为人工智能应用领域提供了更多的可能性。</description><guid isPermaLink="true">https://hacker4257.github.io//post/kai-yuan-da-mo-xing-%20Llama%20-shi-zhan.html</guid><pubDate>Thu, 10 Oct 2024 02:45:50 +0000</pubDate></item><item><title> 提示工程学习笔记</title><link>https://hacker4257.github.io//post/%20-ti-shi-gong-cheng-xue-xi-bi-ji.html</link><description>&#13;
提示工程（Prompt Engineering）是一种通过设计和优化给定的提示（Prompt）来控制AI生成内容质量的技术。</description><guid isPermaLink="true">https://hacker4257.github.io//post/%20-ti-shi-gong-cheng-xue-xi-bi-ji.html</guid><pubDate>Wed, 09 Oct 2024 06:31:11 +0000</pubDate></item><item><title>Leetcode系列之Z字行变换</title><link>https://hacker4257.github.io//post/Leetcode-xi-lie-zhi-Z-zi-xing-bian-huan.html</link><description>### 6. Z 字形变换&#13;
### 题目描述&#13;
将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</description><guid isPermaLink="true">https://hacker4257.github.io//post/Leetcode-xi-lie-zhi-Z-zi-xing-bian-huan.html</guid><pubDate>Wed, 02 Oct 2024 08:48:35 +0000</pubDate></item><item><title>国庆快乐</title><link>https://hacker4257.github.io//post/guo-qing-kuai-le.html</link><description># enjoy life&#13;
&lt;!-- ##{'timestamp':1727748060}## --&gt;。</description><guid isPermaLink="true">https://hacker4257.github.io//post/guo-qing-kuai-le.html</guid><pubDate>Tue, 01 Oct 2024 02:01:00 +0000</pubDate></item><item><title>如何使用Kubeadm设置Kubernetes集群</title><link>https://hacker4257.github.io//post/ru-he-shi-yong-Kubeadm-she-zhi-Kubernetes-ji-qun.html</link><description>### 实验环境&#13;
MacBook Pro 16-inch, 2019&#13;
&#13;
处理器: 2.4 GHz 8-Core Intel Core i9&#13;
&#13;
内存: 32 GB 2667 MHz DDR4&#13;
&#13;
macos:  Sonoma version 14.2.1 (23C71)&#13;
&#13;
使用UTM虚拟机工具创建3台ubuntu20.04-arm64，虚拟机配置均为2核4G, 采用1个master， 2个node的构架&#13;
&#13;
###  部署架构规划&#13;
| 角色 | 主机名 | 组件 | IP |&#13;
|-------|-------|-------|-------|&#13;
| master | master | etcd、apiserver、controller-manager、scheduler、kubelet、proxy、calico、runc |192.168.64.18&#13;
|node01|node01|pod、kubelet、proxy、calico、runc|192.168.64.19&#13;
|node01|node01|pod、kubelet、proxy、calico、runc|192.168.64.20&#13;
&#13;
### 软件版本&#13;
*docker server ：24.0.7&#13;
&#13;
*containerd ：1.7.12&#13;
&#13;
*kubeadm : v1.30.0&#13;
&#13;
*kubelet : v1.30.0&#13;
&#13;
*kubectl : v1.30.0&#13;
&#13;
### 集群服务初始化 （3*， 所有机器都执行）&#13;
#### 切换为管理员&#13;
```shell&#13;
sudo su&#13;
```&#13;
#### 添加主机名&#13;
```shell&#13;
cat &gt;&gt; /etc/hosts &lt;&lt;EOF&#13;
192.168.64.18 master&#13;
192.168.64.19 node01&#13;
192.168.64.20 node02&#13;
EOF&#13;
&#13;
```&#13;
#### 时间同步&#13;
```shell&#13;
apt update &amp;&amp; apt install ntpdate&#13;
ntpdate cn.ntp.org.cn&#13;
```&#13;
#### 关闭防火墙&#13;
```shell&#13;
systemctl disable ufw &amp;&amp; systemctl stop ufw&#13;
```&#13;
#### 关闭swap分区&#13;
```shell&#13;
swapoff -a  # 临时关闭&#13;
sed -ri 's/.swap*./#&amp;/g' /etc/fstab   # 修改配置文件 sed修改配置文件永久关闭&#13;
```&#13;
#### 启用iptables桥接流量&#13;
```shell&#13;
# 添加配置文件&#13;
cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf&#13;
overlay&#13;
br_netfilter&#13;
EOF&#13;
&#13;
# 加载模块&#13;
modprobe overlay&#13;
modprobe br_netfilter&#13;
&#13;
# 设置所需的Sysctl参数，参数在重新启动时保持不变&#13;
cat  &lt;&lt;EOF | tee /etc/sysctl.d/k8s.conf&#13;
net.bridge.bridge-nf-call-iptables = 1&#13;
net.bridge.bridge-nf-call-ip6tables = 1&#13;
net.ipv4.ip_forward = 1&#13;
vm.swappiness = 0&#13;
EOF&#13;
&#13;
# 不重启就应用sysctl参数&#13;
sysctl --system&#13;
&#13;
# 保守建议&#13;
reboot&#13;
```&#13;
#### 安装容器运行时&#13;
k8s支持的容器运行时有很多如docker、containerd、cri-o等等，docker 省事一些，这里选择安装docker&#13;
```shell&#13;
# 安装docker&#13;
apt-get update&#13;
apt install -y docker.io&#13;
&#13;
# 设置docker开机自启&#13;
systemctl start docker&#13;
ststemctl enable docker&#13;
&#13;
# 三个服务都应是running状态&#13;
systemctl status containerd.service&#13;
systemctl status docker.service&#13;
systemctl status docker.socket&#13;
```&#13;
&#13;
#### 配置容器运行时的systemd驱动&#13;
```shell&#13;
&#13;
vim /etc/docker/daemon.json &#13;
&#13;
```&#13;
然后将下面设置加入daemon.js&#13;
```shell&#13;
{&#13;
  'exec-opts': [&#13;
    'native.cgroupdriver=systemd'&#13;
  ]&#13;
}&#13;
&#13;
```&#13;
重启docker&#13;
```shell &#13;
systemctl restart docker&#13;
```&#13;
#### 设置Kubernetes APT存储库的GPG密钥&#13;
```shell &#13;
KUBERNETES_VERSION=1.30&#13;
&#13;
sudo mkdir -p /etc/apt/keyrings&#13;
&#13;
curl -fsSL https://pkgs.k8s.io/core:/stable:/v$KUBERNETES_VERSION/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg&#13;
&#13;
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$KUBERNETES_VERSION/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list&#13;
&#13;
&#13;
```&#13;
 更新 apt 仓库&#13;
 ```shell&#13;
 apt-get update -y&#13;
 ```&#13;
 #### 安装Kubernetes组件&#13;
 ```shell &#13;
 &#13;
 # 安装一些辅助包&#13;
apt-get install -y apt-transport-https ca-certificates curl gpg&#13;
 &#13;
# 安装指定版本&#13;
apt-get install -y kubelet=1.30.0-1.1 kubectl=1.30.0-1.1 kubeadm=1.30.0-1.1&#13;
&#13;
# 确认服务状态（此时kubelet暂未启动）&#13;
systemctl status kubelet&#13;
 ```&#13;
 ### Kubernetes 初始化（只在master操作）&#13;
 ```shell&#13;
kubeadm init \&#13;
  --control-plane-endpoint='192.168.64.18' \&#13;
  --service-cidr=10.96.0.0/12 \&#13;
  --pod-network-cidr=10.244.0.0/16 \&#13;
  --ignore-preflight-errors=all&#13;
  &#13;
# –-apiserver-advertise-address # 集群通告地址，单master时为控制面使用的的服务器IP&#13;
# –-service-cidr #集群内部虚拟网络，Pod统一访问入口，可以不用更改，直接用上面的参数&#13;
# –-pod-network-cidr #Pod网络，与下面部署的CNI网络组件yaml中保持一致，可以不用更改，直接用上面的参数&#13;
&#13;
 ```&#13;
 初始化成功显示如下&#13;
 ```shell&#13;
 Your Kubernetes control-plane has initialized successfully!&#13;
&#13;
To start using your cluster, you need to run the following as a regular user:&#13;
&#13;
  mkdir -p $HOME/.kube&#13;
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config&#13;
  sudo chown $(id -u):$(id -g) $HOME/.kube/config&#13;
&#13;
Alternatively, if you are the root user, you can run:&#13;
&#13;
  export KUBECONFIG=/etc/kubernetes/admin.conf&#13;
&#13;
You should now deploy a pod network to the cluster.&#13;
Run 'kubectl apply -f [podnetwork].yaml' with one of the options listed at:&#13;
  https://kubernetes.io/docs/concepts/cluster-administration/addons/&#13;
&#13;
You can now join any number of the control-plane node running the following command on each as root:&#13;
&#13;
  kubeadm join 192.168.64.18:6443 --token m5pstt.v2gebrasw9yfzxb6 \&#13;
	--discovery-token-ca-cert-hash sha256:205a991b66a2ec879bd36f66851725fd84201d7306bb088ceda8835ad99450b8 \&#13;
	--control-plane --certificate-key 34a274a91255cf25cda3af0f6ecbfc2876e97196491338aab72ca1b3bd09e1d1&#13;
&#13;
Please note that the certificate-key gives access to cluster sensitive data, keep it secret!&#13;
As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use&#13;
'kubeadm init phase upload-certs --upload-certs' to reload certs afterward.&#13;
&#13;
Then you can join any number of worker nodes by running the following on each as root:&#13;
&#13;
kubeadm join 192.168.64.18:6443 --token m5pstt.v2gebrasw9yfzxb6 \&#13;
	--discovery-token-ca-cert-hash sha256:205a991b66a2ec879bd36f66851725fd84201d7306bb088ceda8835ad99450b8 &#13;
 ```&#13;
 从输出中使用以下命令在master中创建kubeconfig，以便您可以使用kubectl与集群API交互。</description><guid isPermaLink="true">https://hacker4257.github.io//post/ru-he-shi-yong-Kubeadm-she-zhi-Kubernetes-ji-qun.html</guid><pubDate>Mon, 30 Sep 2024 05:01:55 +0000</pubDate></item><item><title>设计模式之备忘录模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-bei-wang-lu-mo-shi.html</link><description>## 备忘录模式&#13;
备忘录模式是一种行为设计模式，它允许保存和恢复对象的内部状态，而无需暴露该对象的实现细节。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-bei-wang-lu-mo-shi.html</guid><pubDate>Sun, 29 Sep 2024 13:09:12 +0000</pubDate></item><item><title>设计模式之模板方法模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-mo-ban-fang-fa-mo-shi.html</link><description>## 模板方法模式&#13;
&#13;
模板方法模式是一种行为型设计模式，它定义了一个操作中的算法的框架，并将一些步骤的执行延迟到子类中。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-mo-ban-fang-fa-mo-shi.html</guid><pubDate>Sat, 28 Sep 2024 06:46:15 +0000</pubDate></item><item><title>设计模式之迭代器模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-die-dai-qi-mo-shi.html</link><description>## 迭代器模式&#13;
&#13;
迭代器模式（Iterator Pattern）是一种行为设计模式，它提供了一种顺序访问集合对象中各个元素的方法，而不需要暴露该对象的内部表示。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-die-dai-qi-mo-shi.html</guid><pubDate>Fri, 27 Sep 2024 03:04:05 +0000</pubDate></item><item><title>从零学数据结构</title><link>https://hacker4257.github.io//post/cong-ling-xue-shu-ju-jie-gou.html</link><description># 第一课：数据结构概述和数组&#13;
&#13;
在这一课中，我们将首先了解数据结构的基本概念，然后深入学习数组这一基本数据结构。</description><guid isPermaLink="true">https://hacker4257.github.io//post/cong-ling-xue-shu-ju-jie-gou.html</guid><pubDate>Thu, 26 Sep 2024 09:43:24 +0000</pubDate></item><item><title>设计模式之函数选项模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-han-shu-xuan-xiang-mo-shi.html</link><description>## 函数选项模式&#13;
&#13;
函数选项模式（Functional Options Pattern）在Go语言中是一种流行的设计模式，用于构建灵活且易于扩展的API。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-han-shu-xuan-xiang-mo-shi.html</guid><pubDate>Wed, 25 Sep 2024 02:59:21 +0000</pubDate></item><item><title>设计模式之组合模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-zu-he-mo-shi.html</link><description>## 组合模式&#13;
组合模式是一种结构型设计模式，用于将对象组织成树形结构以表示部分-整体的层次关系。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-zu-he-mo-shi.html</guid><pubDate>Tue, 24 Sep 2024 02:37:09 +0000</pubDate></item><item><title>设计模式之适配器模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-shi-pei-qi-mo-shi.html</link><description>## 适配器模式&#13;
&#13;
适配器模式（Adapter Pattern）是一种结构型设计模式，它允许不兼容的接口之间进行交互。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-shi-pei-qi-mo-shi.html</guid><pubDate>Mon, 23 Sep 2024 02:58:08 +0000</pubDate></item><item><title>设计模式之策略模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-ce-lve-mo-shi.html</link><description>策略模式（Strategy Pattern）是一种常用的设计模式，属于行为型模式。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-ce-lve-mo-shi.html</guid><pubDate>Sun, 22 Sep 2024 04:47:21 +0000</pubDate></item><item><title>设计模式之访问模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-fang-wen-mo-shi.html</link><description>&#13;
访问模式（Visitor Pattern）是一种行为型设计模式，它允许在不修改已有程序结构的情况下，向已有的对象结构中添加新的操作。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-fang-wen-mo-shi.html</guid><pubDate>Sat, 21 Sep 2024 03:32:41 +0000</pubDate></item><item><title>设计模式之观察者模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-guan-cha-zhe-mo-shi.html</link><description>## 观察者模式&#13;
观察者模式（Observer Pattern）是一种常用的软件设计模式，属于行为型模式。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-guan-cha-zhe-mo-shi.html</guid><pubDate>Fri, 20 Sep 2024 06:49:13 +0000</pubDate></item><item><title>设计模式之命令模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-ming-ling-mo-shi.html</link><description>## 命令模式&#13;
命令模式（Command Pattern）是一种行为型设计模式，它主要目的是将请求或简单操作封装为一个对象。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-ming-ling-mo-shi.html</guid><pubDate>Thu, 19 Sep 2024 00:30:22 +0000</pubDate></item><item><title>设计模式之模板模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-mo-ban-mo-shi.html</link><description>模板方法模式是一种行为设计模式，它定义了一个算法的骨架，允许子类在不改变算法结构的情况下重定义算法的某些特定步骤。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-mo-ban-mo-shi.html</guid><pubDate>Wed, 18 Sep 2024 05:03:06 +0000</pubDate></item><item><title>从零学Go系列第一课</title><link>https://hacker4257.github.io//post/cong-ling-xue-Go-xi-lie-di-yi-ke.html</link><description>## 基础篇&#13;
### 第一步：安装Go&#13;
&#13;
1. 访问Go语言的官方网站：https://golang.org/&#13;
2. 点击下载页面，选择适合你的操作系统的安装包（Windows、macOS或Linux）。</description><guid isPermaLink="true">https://hacker4257.github.io//post/cong-ling-xue-Go-xi-lie-di-yi-ke.html</guid><pubDate>Sun, 01 Jan 2023 06:03:07 +0000</pubDate></item><item><title>二分查找：高效解决排序问题的算法</title><link>https://hacker4257.github.io//post/er-fen-cha-zhao-%EF%BC%9A-gao-xiao-jie-jue-pai-xu-wen-ti-de-suan-fa.html</link><description>## 引言&#13;
&#13;
在计算机科学中，查找问题是非常常见的任务之一，尤其是在处理大量数据时。</description><guid isPermaLink="true">https://hacker4257.github.io//post/er-fen-cha-zhao-%EF%BC%9A-gao-xiao-jie-jue-pai-xu-wen-ti-de-suan-fa.html</guid><pubDate>Wed, 10 Aug 2022 01:42:42 +0000</pubDate></item><item><title> 2021年个人年度总结</title><link>https://hacker4257.github.io//post/%202021-nian-ge-ren-nian-du-zong-jie.html</link><description>2021年对我来说是充满挑战与成长的一年。</description><guid isPermaLink="true">https://hacker4257.github.io//post/%202021-nian-ge-ren-nian-du-zong-jie.html</guid><pubDate>Fri, 31 Dec 2021 15:59:00 +0000</pubDate></item><item><title>推荐书籍---《我的第一本算法书》</title><link>https://hacker4257.github.io//post/tui-jian-shu-ji----%E3%80%8A-wo-de-di-yi-ben-suan-fa-shu-%E3%80%8B.html</link><description>### 推荐阅读：《我的第一本算法书》&#13;
![image-20240920175559189](https://github.com/user-attachments/assets/5ac15193-ca77-4a59-a049-2e77dc4dc1e9)&#13;
&#13;
当我们谈论编程和数据结构时，算法是一个不可或缺的主题。</description><guid isPermaLink="true">https://hacker4257.github.io//post/tui-jian-shu-ji----%E3%80%8A-wo-de-di-yi-ben-suan-fa-shu-%E3%80%8B.html</guid><pubDate>Thu, 01 Oct 2020 09:59:51 +0000</pubDate></item><item><title>堆排序</title><link>https://hacker4257.github.io//post/dui-pai-xu.html</link><description>堆排序是一种选择排序的变形，它利用堆这种数据结构的特性来实现排序。</description><guid isPermaLink="true">https://hacker4257.github.io//post/dui-pai-xu.html</guid><pubDate>Tue, 24 Sep 2019 07:41:59 +0000</pubDate></item><item><title>快排</title><link>https://hacker4257.github.io//post/kuai-pai.html</link><description>快速排序是一种高效的排序算法，使用分治法（Divide and Conquer）策略来把一个序列分为较小和较大的两个子序列，然后递归地排序两个子序列。</description><guid isPermaLink="true">https://hacker4257.github.io//post/kuai-pai.html</guid><pubDate>Thu, 01 Aug 2019 11:03:07 +0000</pubDate></item><item><title>《星际穿越》：科学与情感的完美交织</title><link>https://hacker4257.github.io//post/%E3%80%8A-xing-ji-chuan-yue-%E3%80%8B%EF%BC%9A-ke-xue-yu-qing-gan-de-wan-mei-jiao-zhi.html</link><description>## 引言&#13;
![下载](https://github.com/user-attachments/assets/d8bd62fb-072c-4e26-9a5a-0ef1e9b5a76e)&#13;
&#13;
**《星际穿越》**（*Interstellar*），是由克里斯托弗·诺兰（Christopher Nolan）执导的科幻电影，于2014年上映。</description><guid isPermaLink="true">https://hacker4257.github.io//post/%E3%80%8A-xing-ji-chuan-yue-%E3%80%8B%EF%BC%9A-ke-xue-yu-qing-gan-de-wan-mei-jiao-zhi.html</guid><pubDate>Mon, 01 Oct 2018 13:42:42 +0000</pubDate></item><item><title>docker常见命令</title><link>https://hacker4257.github.io//post/docker-chang-jian-ming-ling.html</link><description>### 1. 基础命令&#13;
&#13;
- **查看 Docker 版本**&#13;
  ```bash&#13;
  docker --version&#13;
  ```&#13;
&#13;
- **查看 Docker 状态**&#13;
  ```bash&#13;
  docker info&#13;
  ```&#13;
&#13;
### 2. 容器操作&#13;
&#13;
- **拉取镜像**&#13;
  ```bash&#13;
  docker pull &lt;image_name&gt;&#13;
  ```&#13;
  从 Docker Hub 拉取指定镜像。</description><guid isPermaLink="true">https://hacker4257.github.io//post/docker-chang-jian-ming-ling.html</guid><pubDate>Wed, 21 Jun 2017 15:56:49 +0000</pubDate></item><item><title>docker简介</title><link>https://hacker4257.github.io//post/docker-jian-jie.html</link><description>### Docker: 引领容器化技术的革命&#13;
&#13;
在软件开发和部署的世界中，Docker 已经成为一个革命性的名词。</description><guid isPermaLink="true">https://hacker4257.github.io//post/docker-jian-jie.html</guid><pubDate>Fri, 09 Jun 2017 03:56:28 +0000</pubDate></item><item><title>里约奥运会</title><link>https://hacker4257.github.io//post/li-yue-ao-yun-hui.html</link><description>里约热内卢奥运会（2016年夏季奥林匹克运动会）是一项全球性的体育盛事，于2016年8月5日至21日在巴西里约热内卢举行。</description><guid isPermaLink="true">https://hacker4257.github.io//post/li-yue-ao-yun-hui.html</guid><pubDate>Sun, 23 Oct 2016 04:00:50 +0000</pubDate></item><item><title>从零学Python系列第一课</title><link>https://hacker4257.github.io//post/cong-ling-xue-Python-xi-lie-di-yi-ke.html</link><description>### Python基础&#13;
&#13;
#### 1. Python简介&#13;
&#13;
Python是一种广泛使用的高级编程语言，它由Guido van Rossum在1989年设计并于1991年首次发布。</description><guid isPermaLink="true">https://hacker4257.github.io//post/cong-ling-xue-Python-xi-lie-di-yi-ke.html</guid><pubDate>Wed, 23 Sep 2015 03:49:39 +0000</pubDate></item><item><title>hello world</title><link>https://hacker4257.github.io//post/hello%20world.html</link><description>开通博客第一篇写点什么呢？ 没有什么比 hello world 经典。</description><guid isPermaLink="true">https://hacker4257.github.io//post/hello%20world.html</guid><pubDate>Mon, 09 Jun 2014 00:13:35 +0000</pubDate></item><item><title>自我介绍</title><link>https://hacker4257.github.io//about.html</link><description>hi！我是 hacker4257，一名全栈开发工程师，专注于使用 **Golang**、**Python** 和 **React** 开发高效、可扩展的应用程序。</description><guid isPermaLink="true">https://hacker4257.github.io//about.html</guid><pubDate>Fri, 20 Sep 2024 10:21:56 +0000</pubDate></item></channel></rss>