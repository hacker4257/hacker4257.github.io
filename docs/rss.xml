<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Love life Love code</title><link>https://hacker4257.github.io/</link><description>Love life Love code</description><copyright>Love life Love code</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://hacker4257.github.io/ava.jpeg</url><title>avatar</title><link>https://hacker4257.github.io/</link></image><lastBuildDate>Sun, 29 Sep 2024 13:09:37 +0000</lastBuildDate><managingEditor>Love life Love code</managingEditor><ttl>60</ttl><webMaster>Love life Love code</webMaster><item><title>设计模式之备忘录模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-bei-wang-lu-mo-shi.html</link><description>## 备忘录模式&#13;
备忘录模式是一种行为设计模式，它允许保存和恢复对象的内部状态，而无需暴露该对象的实现细节。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-bei-wang-lu-mo-shi.html</guid><pubDate>Sun, 29 Sep 2024 13:09:12 +0000</pubDate></item><item><title>设计模式之模板方法模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-mo-ban-fang-fa-mo-shi.html</link><description>## 模板方法模式&#13;
&#13;
模板方法模式是一种行为型设计模式，它定义了一个操作中的算法的框架，并将一些步骤的执行延迟到子类中。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-mo-ban-fang-fa-mo-shi.html</guid><pubDate>Sat, 28 Sep 2024 06:46:15 +0000</pubDate></item><item><title>设计模式之迭代器模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-die-dai-qi-mo-shi.html</link><description>## 迭代器模式&#13;
&#13;
迭代器模式（Iterator Pattern）是一种行为设计模式，它提供了一种顺序访问集合对象中各个元素的方法，而不需要暴露该对象的内部表示。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-die-dai-qi-mo-shi.html</guid><pubDate>Fri, 27 Sep 2024 03:04:05 +0000</pubDate></item><item><title>从零学数据结构</title><link>https://hacker4257.github.io//post/cong-ling-xue-shu-ju-jie-gou.html</link><description># 第一课：数据结构概述和数组&#13;
&#13;
在这一课中，我们将首先了解数据结构的基本概念，然后深入学习数组这一基本数据结构。</description><guid isPermaLink="true">https://hacker4257.github.io//post/cong-ling-xue-shu-ju-jie-gou.html</guid><pubDate>Thu, 26 Sep 2024 09:43:24 +0000</pubDate></item><item><title>设计模式之函数选项模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-han-shu-xuan-xiang-mo-shi.html</link><description>## 函数选项模式&#13;
&#13;
函数选项模式（Functional Options Pattern）在Go语言中是一种流行的设计模式，用于构建灵活且易于扩展的API。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-han-shu-xuan-xiang-mo-shi.html</guid><pubDate>Wed, 25 Sep 2024 02:59:21 +0000</pubDate></item><item><title>设计模式之组合模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-zu-he-mo-shi.html</link><description>## 组合模式&#13;
组合模式是一种结构型设计模式，用于将对象组织成树形结构以表示部分-整体的层次关系。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-zu-he-mo-shi.html</guid><pubDate>Tue, 24 Sep 2024 02:37:09 +0000</pubDate></item><item><title>设计模式之适配器模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-shi-pei-qi-mo-shi.html</link><description>## 适配器模式&#13;
&#13;
适配器模式（Adapter Pattern）是一种结构型设计模式，它允许不兼容的接口之间进行交互。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-shi-pei-qi-mo-shi.html</guid><pubDate>Mon, 23 Sep 2024 02:58:08 +0000</pubDate></item><item><title>设计模式之策略模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-ce-lve-mo-shi.html</link><description>策略模式（Strategy Pattern）是一种常用的设计模式，属于行为型模式。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-ce-lve-mo-shi.html</guid><pubDate>Sun, 22 Sep 2024 04:47:21 +0000</pubDate></item><item><title>设计模式之访问模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-fang-wen-mo-shi.html</link><description>&#13;
访问模式（Visitor Pattern）是一种行为型设计模式，它允许在不修改已有程序结构的情况下，向已有的对象结构中添加新的操作。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-fang-wen-mo-shi.html</guid><pubDate>Sat, 21 Sep 2024 03:32:41 +0000</pubDate></item><item><title>设计模式之观察者模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-guan-cha-zhe-mo-shi.html</link><description>## 观察者模式&#13;
观察者模式（Observer Pattern）是一种常用的软件设计模式，属于行为型模式。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-guan-cha-zhe-mo-shi.html</guid><pubDate>Fri, 20 Sep 2024 06:49:13 +0000</pubDate></item><item><title>设计模式之命令模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-ming-ling-mo-shi.html</link><description>## 命令模式&#13;
命令模式（Command Pattern）是一种行为型设计模式，它主要目的是将请求或简单操作封装为一个对象。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-ming-ling-mo-shi.html</guid><pubDate>Thu, 19 Sep 2024 00:30:22 +0000</pubDate></item><item><title>设计模式之模板模式</title><link>https://hacker4257.github.io//post/she-ji-mo-shi-zhi-mo-ban-mo-shi.html</link><description>模板方法模式是一种行为设计模式，它定义了一个算法的骨架，允许子类在不改变算法结构的情况下重定义算法的某些特定步骤。</description><guid isPermaLink="true">https://hacker4257.github.io//post/she-ji-mo-shi-zhi-mo-ban-mo-shi.html</guid><pubDate>Wed, 18 Sep 2024 05:03:06 +0000</pubDate></item><item><title>从零学Go系列第一课</title><link>https://hacker4257.github.io//post/cong-ling-xue-Go-xi-lie-di-yi-ke.html</link><description>## 基础篇&#13;
### 第一步：安装Go&#13;
&#13;
1. 访问Go语言的官方网站：https://golang.org/&#13;
2. 点击下载页面，选择适合你的操作系统的安装包（Windows、macOS或Linux）。</description><guid isPermaLink="true">https://hacker4257.github.io//post/cong-ling-xue-Go-xi-lie-di-yi-ke.html</guid><pubDate>Sun, 01 Jan 2023 06:03:07 +0000</pubDate></item><item><title>二分查找：高效解决排序问题的算法</title><link>https://hacker4257.github.io//post/er-fen-cha-zhao-%EF%BC%9A-gao-xiao-jie-jue-pai-xu-wen-ti-de-suan-fa.html</link><description>## 引言&#13;
&#13;
在计算机科学中，查找问题是非常常见的任务之一，尤其是在处理大量数据时。</description><guid isPermaLink="true">https://hacker4257.github.io//post/er-fen-cha-zhao-%EF%BC%9A-gao-xiao-jie-jue-pai-xu-wen-ti-de-suan-fa.html</guid><pubDate>Wed, 10 Aug 2022 01:42:42 +0000</pubDate></item><item><title> 2021年个人年度总结</title><link>https://hacker4257.github.io//post/%202021-nian-ge-ren-nian-du-zong-jie.html</link><description>2021年对我来说是充满挑战与成长的一年。</description><guid isPermaLink="true">https://hacker4257.github.io//post/%202021-nian-ge-ren-nian-du-zong-jie.html</guid><pubDate>Fri, 31 Dec 2021 15:59:00 +0000</pubDate></item><item><title>推荐书籍---《我的第一本算法书》</title><link>https://hacker4257.github.io//post/tui-jian-shu-ji----%E3%80%8A-wo-de-di-yi-ben-suan-fa-shu-%E3%80%8B.html</link><description>### 推荐阅读：《我的第一本算法书》&#13;
![image-20240920175559189](https://github.com/user-attachments/assets/5ac15193-ca77-4a59-a049-2e77dc4dc1e9)&#13;
&#13;
当我们谈论编程和数据结构时，算法是一个不可或缺的主题。</description><guid isPermaLink="true">https://hacker4257.github.io//post/tui-jian-shu-ji----%E3%80%8A-wo-de-di-yi-ben-suan-fa-shu-%E3%80%8B.html</guid><pubDate>Thu, 01 Oct 2020 09:59:51 +0000</pubDate></item><item><title>堆排序</title><link>https://hacker4257.github.io//post/dui-pai-xu.html</link><description>堆排序是一种选择排序的变形，它利用堆这种数据结构的特性来实现排序。</description><guid isPermaLink="true">https://hacker4257.github.io//post/dui-pai-xu.html</guid><pubDate>Tue, 24 Sep 2019 07:41:59 +0000</pubDate></item><item><title>快排</title><link>https://hacker4257.github.io//post/kuai-pai.html</link><description>快速排序是一种高效的排序算法，使用分治法（Divide and Conquer）策略来把一个序列分为较小和较大的两个子序列，然后递归地排序两个子序列。</description><guid isPermaLink="true">https://hacker4257.github.io//post/kuai-pai.html</guid><pubDate>Thu, 01 Aug 2019 11:03:07 +0000</pubDate></item><item><title>《星际穿越》：科学与情感的完美交织</title><link>https://hacker4257.github.io//post/%E3%80%8A-xing-ji-chuan-yue-%E3%80%8B%EF%BC%9A-ke-xue-yu-qing-gan-de-wan-mei-jiao-zhi.html</link><description>## 引言&#13;
![下载](https://github.com/user-attachments/assets/d8bd62fb-072c-4e26-9a5a-0ef1e9b5a76e)&#13;
&#13;
**《星际穿越》**（*Interstellar*），是由克里斯托弗·诺兰（Christopher Nolan）执导的科幻电影，于2014年上映。</description><guid isPermaLink="true">https://hacker4257.github.io//post/%E3%80%8A-xing-ji-chuan-yue-%E3%80%8B%EF%BC%9A-ke-xue-yu-qing-gan-de-wan-mei-jiao-zhi.html</guid><pubDate>Mon, 01 Oct 2018 13:42:42 +0000</pubDate></item><item><title>docker常见命令</title><link>https://hacker4257.github.io//post/docker-chang-jian-ming-ling.html</link><description>### 1. 基础命令&#13;
&#13;
- **查看 Docker 版本**&#13;
  ```bash&#13;
  docker --version&#13;
  ```&#13;
&#13;
- **查看 Docker 状态**&#13;
  ```bash&#13;
  docker info&#13;
  ```&#13;
&#13;
### 2. 容器操作&#13;
&#13;
- **拉取镜像**&#13;
  ```bash&#13;
  docker pull &lt;image_name&gt;&#13;
  ```&#13;
  从 Docker Hub 拉取指定镜像。</description><guid isPermaLink="true">https://hacker4257.github.io//post/docker-chang-jian-ming-ling.html</guid><pubDate>Wed, 21 Jun 2017 15:56:49 +0000</pubDate></item><item><title>docker简介</title><link>https://hacker4257.github.io//post/docker-jian-jie.html</link><description>### Docker: 引领容器化技术的革命&#13;
&#13;
在软件开发和部署的世界中，Docker 已经成为一个革命性的名词。</description><guid isPermaLink="true">https://hacker4257.github.io//post/docker-jian-jie.html</guid><pubDate>Fri, 09 Jun 2017 03:56:28 +0000</pubDate></item><item><title>里约奥运会</title><link>https://hacker4257.github.io//post/li-yue-ao-yun-hui.html</link><description>里约热内卢奥运会（2016年夏季奥林匹克运动会）是一项全球性的体育盛事，于2016年8月5日至21日在巴西里约热内卢举行。</description><guid isPermaLink="true">https://hacker4257.github.io//post/li-yue-ao-yun-hui.html</guid><pubDate>Sun, 23 Oct 2016 04:00:50 +0000</pubDate></item><item><title>从零学Python系列第一课</title><link>https://hacker4257.github.io//post/cong-ling-xue-Python-xi-lie-di-yi-ke.html</link><description>### Python基础&#13;
&#13;
#### 1. Python简介&#13;
&#13;
Python是一种广泛使用的高级编程语言，它由Guido van Rossum在1989年设计并于1991年首次发布。</description><guid isPermaLink="true">https://hacker4257.github.io//post/cong-ling-xue-Python-xi-lie-di-yi-ke.html</guid><pubDate>Wed, 23 Sep 2015 03:49:39 +0000</pubDate></item><item><title>hello world</title><link>https://hacker4257.github.io//post/hello%20world.html</link><description>开通博客第一篇写点什么呢？ 没有什么比 hello world 经典。</description><guid isPermaLink="true">https://hacker4257.github.io//post/hello%20world.html</guid><pubDate>Mon, 09 Jun 2014 00:13:35 +0000</pubDate></item><item><title>自我介绍</title><link>https://hacker4257.github.io//about.html</link><description>hi！我是 hacker4257，一名全栈开发工程师，专注于使用 **Golang**、**Python** 和 **React** 开发高效、可扩展的应用程序。</description><guid isPermaLink="true">https://hacker4257.github.io//about.html</guid><pubDate>Fri, 20 Sep 2024 10:21:56 +0000</pubDate></item></channel></rss>